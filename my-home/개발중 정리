https://blog.naver.com/pjok1122/222164741360

몽고db 트랜잭션
RDB 기준으로만 개발하다보니
몽고디비 사용시 에도 꼭 서비스 레이어에 트랜잭션 어노테이션을 붙여서
한게의 작업단위 트랜잭션을 처리해야 할 것 같았다.

그래서 수 많은 구글링을 통해 몽고db 도 4.0부터 'Replica-Set' 으로 구성된
디비 시스템 기준으로 지원이 가능하다는 것 을 깨달아서 임시 방편으로 도커 + 몽고 를 활용하여
결국 임시로 트랜잭션 처리하려고 https://devs0n.tistory.com/45 처럼 설정을 바꿨음.

그런데 실제로 작업 post를 보내며 값을 테스트 결과를 확인해 보니
트랜잭션 처리 관련 동시성 문제가 너무 많이 발생됨

그러던중 기술 블로그에서
몽고DB와 같이 NoSQL에서는 굉장히 방대한 데이터를 수시로 쓰고,
읽는 (예를 들어 트위터 서비스를 만든다고 생각해보시면, 굉장히 많은 수의 데이터가 수시로 써지고, 읽혀집니다.)
환경을 예상하기 때문에, transaction 과같은 고비용 처리는 그다지 많이 사용되지는 않습니다.
라는 글을 읽고 어차피 나도 단일 문서 기반으로 공공데이터 request값 저장 및 읽기 처리만 하는데
트랜잭션 처리를 해야만 하는가 라는 생각이 들어서 과감하게 제외하고 각 repository에서 이뤄지는 디폴트 설정으로만 제어하기로 결정했음
https://www.mongodb.com/docs/manual/core/transactions/



https://gofnrk.tistory.com/123

  

기존처럼 RestTemplate안쓰고 WebClient 사용
https://gngsn.tistory.com/154

- uriBuilderFactory : base url을 커스텀한 UriBuilderFactory
- defaultHeader : 모든 요청에 사용할 헤더
- defaultCookie : 모든 요청에 사용할 쿠키
- defaultRequest : 모든 요청을 커스텀할 Consumer
- filter : 모든 요청에 사용할 클라이언트 필터
- exchangeStrategies : HTTP 메시지 reader & writer 커스터마이징
- clientConnector : HTTP 클라이언트 라이브러리 세팅

  

3. marshalling , unmarshalling
marshalling(마셜링), unmarshalling(언마셜링) 의 의미는 다음과 같습니다.

marshalling : JAVA -> XML 변환
unmarshalling : XML -> JAVA 변환